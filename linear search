#include <stdio.h>
#include <stdlib.h>

// Function for linear search
int linear_search(int L[], int n, int target) {
    for (int i = 0; i < n; i++) {
        if (L[i] == target) {
            return i; // Return index if found
        }
    }
    return -1; // Return -1 if not found
}

int main() {
    int n, target, result;
    int *L; // Pointer to dynamically allocated array

    printf("Enter no of elements in list you needed: ");
    if (scanf("%d", &n) != 1 || n <= 0) {
        printf("Invalid input for the number of elements.\n");
        return 1; // Indicate an error
    }

    // Dynamically allocate memory for the list
    L = (int *)malloc(n * sizeof(int));
    if (L == NULL) {
        printf("Memory allocation failed.\n");
        return 1; // Indicate an error
    }

    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        if (scanf("%d", &L[i]) != 1) {
            printf("Invalid input for element %d.\n", i + 1);
            free(L); // Free allocated memory
            return 1; // Indicate an error
        }
    }

    printf("Enter the element to search: ");
    if (scanf("%d", &target) != 1) {
        printf("Invalid input for the target element.\n");
        free(L); // Free allocated memory
        return 1; // Indicate an error
    }

    result = linear_search(L, n, target); // Call the function

    if (result == -1) {
        printf("Element not found\n");
    } else {
        printf("Element found at index %d\n", result);
    }

    free(L); // Free the dynamically allocated memory
    return 0; // Indicate successful execution
}

/*
OUTPUT:
1ST TESTCASE:
Enter no of elements in list you needed: 5
Enter the elements:
12
15
5
6
3
Enter the element to search: 5
Element found at index 2

2ND TESTCASE:
Enter no of elements in list you needed: 4
Enter the elements:
1
2
3
4
Enter the element to search: 5
Element not found
*/
